#define ZMK_POINTING_DEFAULT_MOVE_VAL 800
#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT0   0
#define FUNCTION1  1
#define NUMBER2    2
#define ARROW3     3
#define MOUSE4     4
#define SNIPE5     5
#define SCROLL6    6
#define BLUETOOTH7 7

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&mmv_input_listener {
    precision {
        layers = <SNIPE5>;
        input-processors = <&zip_xy_scaler 1 4>;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <13 11>;
        };

        han_zen {
            bindings = <&kp LA(GRAVE)>;
            key-positions = <2 4>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        CTRL_mkp: CTRL_mkp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp RCTRL>,
                       <&mkp MB1>, 
                       <&macro_release>;

            label = "CTRL_MKP";
        };
    };

    behaviors {
        rot_kp: sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        scrl_s_up: scrl_shift_up {
            compatible = "zmk,behavior-mod-morph";
            label = "scrl_shift_up";
            bindings = <&msc SCRL_UP>, <&kp C_VOLUME_UP>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        scrl_s_down: scrl_shift_down {
            compatible = "zmk,behavior-mod-morph";
            label = "scrl_shift_down";
            bindings = <&msc SCRL_DOWN>, <&kp C_VOLUME_DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        scrl_c_up: scrl_ctrl_up {
            compatible = "zmk,behavior-mod-morph";
            label = "scrl_ctrl_up";
            bindings = <&kp LA(TAB)>, <&kp LC(LG(RIGHT_ARROW))>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        scrl_c_down: scrl_ctrl_down {
            compatible = "zmk,behavior-mod-morph";
            label = "scrl_ctrl_down";
            bindings = <&kp LA(LS(TAB))>, <&kp LC(LG(LEFT_ARROW))>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        scrl_c_a_up: scrl_ctrl_alt_up {
            compatible = "zmk,behavior-mod-morph";
            label = "scrl_ctrl_alt_up";
            bindings = <&scrl_s_up>, <&scrl_c_up>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL)>;
        };

        scrl_c_a_down: scrl_ctrl_alt_down {
            compatible = "zmk,behavior-mod-morph";
            label = "scrl_ctrl_alt_down";
            bindings = <&scrl_s_down>, <&scrl_c_down>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL)>;
        };

        encoder_msc_down_up_0: encoder_msc_down_up_0 {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP_ 0";
            #sensor-binding-cells = <0>;
            bindings = <&scrl_c_a_down>, <&scrl_c_a_up>;

            tap-ms = <20>;
        };

        fast_pgdn: fast_pgdn {
            compatible = "zmk,behavior-multi";
            label = "FAST_PGDN";
            #binding-cells = <0>;
            bindings = <&msc SCRL_DOWN &msc SCRL_DOWN>;
        };

        fast_pgup: fast_pgup {
            compatible = "zmk,behavior-multi";
            label = "FAST_PGUP";
            #binding-cells = <0>;
            bindings = <&msc SCRL_UP &msc SCRL_UP>;
        };

        encoder_msc_down_up_1: encoder_msc_down_up_1 {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP_1";
            #sensor-binding-cells = <0>;
            bindings = <&fast_pgdn>, <&fast_pgup>;
        };

        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        SlashUnderscore: SlashUnderscore {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASHUNDERSCORE";
            bindings = <&kp SLASH>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minusequal: minusequal {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUSEQUAL";
            bindings = <&kp MINUS>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        henkanMuhenkan: henkanMuhenkan {
            compatible = "zmk,behavior-mod-morph";
            label = "Henkan";
            bindings = <&to_layer_0 INT4>, <&to_layer_0 INT5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lt_henkanMuhenkan: lt_henkanMuhenkan {
            compatible = "zmk,behavior-hold-tap";
            label = "lt_henkanMuhenkan";
            bindings = <&mo>, <&henkanMuhenkan>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT0 {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                            &kp T                                                                          &kp Y                           &kp U  &kp I      &kp O    &lt SCROLL6 P
&kp A             &kp S         &kp D         &kp F                            &kp G                         &kp LS(LG(S))                     &kp SEMICOLON  &kp H                           &kp J  &kp K      &kp L    &lt SNIPE5 SQT
&kp Z             &kp X         &kp C         &kp V                            &kp B                         &kp LEFT_SHIFT                    &minusequal    &kp N                           &kp M  &kp COMMA  &kp DOT  &SlashUnderscore
&mt LCTRL ESCAPE  &kp LEFT_WIN  &kp LEFT_ALT  &lt_henkanMuhenkan BLUETOOTH7 0  &lt_to_layer_0 NUMBER2 SPACE  &lt_to_layer_0 ARROW3 ESCAPE      &kp BACKSPACE  &lt_to_layer_0 FUNCTION1 ENTER                             &kp DEL
            >;

            sensor-bindings = <&encoder_msc_down_up_0>;
        };

        FUNCTION1 {
            bindings = <
&trans  &kp PIPE   &kp DOLLAR     &kp AT_SIGN      &kp BACKSLASH                          &kp F1   &kp F2   &kp F3   &kp F4  &kp F5
&trans  &kp TILDE  &kp AMPERSAND  &kp EXCLAMATION  &kp QUESTION   &kp K_MUTE      &trans  &kp F6   &kp F7   &kp F8   &kp F9  &kp F10
&trans  &kp CARET  &kp PERCENT    &kp HASH         &trans         &trans          &trans  &kp F11  &kp F12  &kp F13  &trans  &trans
&trans  &trans     &trans         &trans           &trans         &trans          &trans  &trans                             &trans
            >;
        };

        NUMBER2 {
            bindings = <
&kp NUMBER_4  &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1  &kp NUMBER_0                                          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LESS_THAN  &kp GREATER_THAN   &trans
&kp NUMBER_9  &kp NUMBER_8  &kp NUMBER_7  &kp NUMBER_6  &kp NUMBER_5  &kp LC(LA(KP_NUMBER_0))      &kp GRAVE  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SQT        &kp DOUBLE_QUOTES  &trans
&kp DOT       &kp PLUS      &kp ASTERISK  &kp FSLH      &kp EQUAL     &trans                       &trans     &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans         &trans             &trans
&trans        &trans        &trans        &trans        &trans        &trans                       &trans     &trans                                                                         &trans
            >;

            sensor-bindings = <&encoder_msc_down_up_1>;
        };

        ARROW3 {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&rot_kp LC(PAGE_DOWN) LC(PAGE_UP)>;
        };

        MOUSE4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &CTRL_mkp  &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1   &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans     &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                 &trans
            >;
        };

        SNIPE5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &CTRL_mkp  &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1   &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans     &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                 &trans
            >;
        };

        SCROLL6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        BLUETOOTH7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
