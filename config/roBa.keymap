#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 800
#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

#include <dt-bindings/zmk/pointing.h>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>

#define DEFAULT0 0
#define FUNCTION1 1
#define NUMBER2 2
#define ARROW3 3
#define MOUSE4 4
#define SNIPE5 5
#define SCROLL6 6
#define BLUETOOTH7 7


&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&mmv_input_listener {
    precision {
        layers = <SNIPE5>;
        input-processors = <&zip_xy_scaler 1 4>;
    };
};

/ {
    input_processors {
        zip_wheel_scaler: zip_wheel_scaler {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;
            codes = <INPUT_REL_WHEEL>;
            track-remainders;
        };
    };
};

&msc_input_listener {
    normal_sc {
        layers = <0>;
        input-processors = <&zip_wheel_scaler 1 1>;
    };
    precision {
        layers = <1>;
        input-processors = <&zip_wheel_scaler 1 2>;
    };
    swing {
        layers = <2>;
        input-processors = <&zip_wheel_scaler 2 1>;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <13 11>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        han_zen {
            bindings = <&kp LA(GRAVE)>;
            key-positions = <3 2>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        rot_kp: sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
            tap-ms = <20>;
        };

        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        backslashUnderscore: backslashUnderscore {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSLASHUNDERSCORE";
            bindings = <&kp SLASH>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minusequal: minusequal {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUSEQUAL";
            bindings = <&kp MINUS>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        henkanMuhenkan: henkanMuhenkan {
            compatible = "zmk,behavior-mod-morph";
            label = "Henkan";
            bindings = <&to_layer_0 INT4>, <&to_layer_0 INT5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lt_henkanMuhenkan: lt_henkanMuhenkan {
            compatible = "zmk,behavior-hold-tap";
            label = "lt_henkanMuhenkan";
            bindings = <&lt>, <&henkanMuhenkan>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
     };


    keymap {
        compatible = "zmk,keymap";

        DEFAULT0 {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                 &kp T                                                             &kp Y        &kp U  &kp I      &kp O    &lt SCROLL6 P
&kp A             &kp S         &kp D         &kp F                 &kp G                    &kp LS(LG(S))            &kp SEMICOLON   &kp H        &kp J  &kp K      &kp L    &lt SNIPE5 SQT
&kp Z             &kp X         &kp C         &kp V                 &kp B                    &kp LEFT_SHIFT           &minusequal     &kp N        &kp M  &kp COMMA  &kp DOT  &backslashUnderscore
&mt LCTRL ESCAPE  &kp LEFT_WIN  &kp LEFT_ALT  &lt_henkanMuhenkan BLUETOOTH7 0 &lt_to_layer_0 NUMBER2 LCTRL  &lt_to_layer_0 ARROW3 SPACE   &kp BACKSPACE   &lt FUNCTON ENTER                             &kp DEL
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        FUNCTION1 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &kp F1   &kp F2   &kp F3   &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp F6   &kp F7   &kp F8   &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp F11  &kp F12  &kp F13  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                             &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        NUMBER2 {
            bindings = <
&kp NUMBER_4  &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1  &kp NUMBER_0                                            &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EXCLAMATION  &kp AMPERSAND  &kp PIPE
&kp NUMBER_9  &kp NUMBER_8  &kp NUMBER_7  &kp NUMBER_6  &kp NUMBER_5  &kp LC(LA(KP_NUMBER_0))      &kp AT_SIGN  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp HASH         &kp DOLLAR     &kp CARET
&kp DOT       &kp PLUS      &kp ASTERISK  &kp FSLH      &kp EQUAL     &trans                       &trans       &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PERCENT      &kp TILDE      &trans
&trans        &trans        &trans        &trans        &trans        &trans                       &trans       &trans                                                                       &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        ARROW3 {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&rot_kp LC(PAGE_DOWN) LC(PAGE_UP)>;
        };

        MOUSE4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SNIPE5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SCROLL6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans 
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        BLUETOOTH7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
